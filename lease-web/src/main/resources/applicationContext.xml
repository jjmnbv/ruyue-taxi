<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-3.0.xsd
            http://www.springframework.org/schema/task 
            http://www.springframework.org/schema/task/spring-task.xsd
            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 加载除SpringMvc用的Bean -->
	<!-- 打开 annotation -->
	<context:annotation-config />
	<!-- 扫描符合@Service @Repository的类 作为Spring容器管理的Bean -->
	<!-- Spring MVC启动时的配置文件，包含组件扫描、url映射以及设置freemarker参数， 让spring不扫描带有@Service注解的类。为什么要这样设置？因为servlet-context.xml与service-context.xml不是同时加载， 
		如果不进行这样的设置，那么，spring就会将所有带@Service注解的类都扫描到容器中，等到加载service-context.xml的时候， 
		会因为容器已经存在Service类，使得cglib将不对Service进行代理，直接导致的结果就是在service-context中的事务配置不起作用， 
		发生异常时，无法对数据进行回滚。 如果在springmvc配置文件，不使用cn.javass.demo.web.controller前缀， 而是使用cn.javass.demo，则service、dao层的bean可能也重新加载了， 
		但事务的AOP代理没有配置在springmvc配置文件中，从而造成新加载的bean覆盖了老的bean， 造成事务失效。只要使用use-default-filters=“false”禁用掉默认的行为就可以了。 -->
	<task:annotation-driven />
	<!-- 启用注解驱动 -->
	<mvc:annotation-driven />
	<!-- 定义扫描根路径为com，不使用默认的扫描方式 -->
	<context:component-scan base-package="com"></context:component-scan>
	<!-- 加载Properties，jdbc的配置信息 -->
<!-- 	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="/WEB-INF/jdbc.properties" />
	</bean> -->
	<bean class="com.szyciov.util.CustomPropertyConfigurer">
		<property name="ignoreResourceNotFound" value="true" /> 
		<property name="locations"> 
			<list>
			 	<value>classpath:jdbc.properties</value> 
			 	<value>classpath:web.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>
	
	<bean class="com.szyciov.util.SMSTempPropertyConfigurer">
		<property name="ignoreResourceNotFound" value="true" /> 
		<property name="locations"> 
			<list>
			 	<value>classpath:sms.properties</value> 
			</list>
		</property>
	</bean>
	
	
	<!-- DBCP数据源 -->
	<bean id="MyDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxWait" value="${dbcp.maxWait}" />

		<!--指明连接是否被空闲连接回收器(如果有)进行检验，如果检测失败，则连接将被从池中去除-->
		<property name="testWhileIdle" value="true" />
		<!--SQL查询,用来验证从连接池取出的连接-->
		<property name="validationQuery" value="select 1" />
		<!--在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位，一般比minEvictableIdleTimeMillis小-->
		<property name="timeBetweenEvictionRunsMillis" value="300000" />
		<!--在每次空闲连接回收器线程(如果有)运行时检查的连接数量，最好和maxActive一致-->
		<property name="numTestsPerEvictionRun" value="${dbcp.maxActive}" />
		<!--连接池中连接，在时间段内一直空闲，被逐出连接池的时间(1000*60*60)，以毫秒为单位-->
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>
	<!-- 
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-configuration.xml" />
		<property name="dataSource" ref="MyDataSource" />
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
	</bean>
	SqlSessionTemplate
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="SqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" />如果想要进行批量操作可加入这个属性
	</bean>
	 -->
	<!-- 注册所有的Mapper接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.szyciov.lease.mapper" />
	</bean>
	<!-- 注册事务管理类 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="MyDataSource" />
	</bean>
	<!-- 开启事务行为 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 对cxf进行管理 
	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />

	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" /> -->
</beans>