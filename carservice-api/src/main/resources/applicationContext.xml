<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-3.0.xsd
            http://www.springframework.org/schema/task 
            http://www.springframework.org/schema/task/spring-task.xsd
            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/rabbit
            http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">
	<!-- 加载除SpringMvc用的Bean -->
	<!-- 打开 annotation -->
	<context:annotation-config />
	<!-- 扫描符合@Service @Repository的类 作为Spring容器管理的Bean -->
	<!-- Spring MVC启动时的配置文件，包含组件扫描、url映射以及设置freemarker参数， 让spring不扫描带有@Service注解的类。为什么要这样设置？因为servlet-context.xml与service-context.xml不是同时加载， 
		如果不进行这样的设置，那么，spring就会将所有带@Service注解的类都扫描到容器中，等到加载service-context.xml的时候， 
		会因为容器已经存在Service类，使得cglib将不对Service进行代理，直接导致的结果就是在service-context中的事务配置不起作用， 
		发生异常时，无法对数据进行回滚。 如果在springmvc配置文件，不使用cn.javass.demo.web.controller前缀， 而是使用cn.javass.demo，则service、dao层的bean可能也重新加载了， 
		但事务的AOP代理没有配置在springmvc配置文件中，从而造成新加载的bean覆盖了老的bean， 造成事务失效。只要使用use-default-filters=“false”禁用掉默认的行为就可以了。 -->
	<task:annotation-driven />
	<!-- 启用注解驱动 -->
	<mvc:annotation-driven />
	<!-- 定义扫描根路径为com，不使用默认的扫描方式 -->
	<context:component-scan base-package="com"></context:component-scan>
	<!-- 加载Properties，jdbc的配置信息 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations" value="/WEB-INF/jdbc.properties" /> </bean> -->
	<bean id="propertyConfigurer2" class="com.szyciov.util.CustomPropertyConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:web.properties</value>
				<value>classpath:redis.properties</value>
				<value>classpath:api.properties</value>
                <value>classpath:rabbitmq.properties</value>
			</list>
		</property>
	</bean>
	
	<bean class="com.szyciov.util.SMSTempPropertyConfigurer">
		<property name="ignoreResourceNotFound" value="true" /> 
		<property name="locations"> 
			<list>
			 	<value>classpath:sms.properties</value> 
			</list>
		</property>
	</bean>

	<!-- DBCP数据源 -->
	<bean id="MyDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxWait" value="${dbcp.maxWait}" />

		<!--指明连接是否被空闲连接回收器(如果有)进行检验，如果检测失败，则连接将被从池中去除-->
		<property name="testWhileIdle" value="true" />
		<!--SQL查询,用来验证从连接池取出的连接-->
		<property name="validationQuery" value="select 1" />
		<!--在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位，一般比minEvictableIdleTimeMillis小-->
		<property name="timeBetweenEvictionRunsMillis" value="300000" />
		<!--在每次空闲连接回收器线程(如果有)运行时检查的连接数量，最好和maxActive一致-->
		<property name="numTestsPerEvictionRun" value="${dbcp.maxActive}" />
		<!--连接池中连接，在时间段内一直空闲，被逐出连接池的时间(1000*60*60)，以毫秒为单位-->
		<property name="minEvictableIdleTimeMillis" value="3600000" />

	</bean>
	
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-configuration.xml" />
		<property name="dataSource" ref="MyDataSource" />
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="SqlSessionFactory" />
	</bean>
	
	<!-- 注册所有的Mapper接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.szyciov.carservice.mapper" />
	</bean>
	<!-- 注册事务管理类 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="MyDataSource" />
	</bean>
	<!-- 开启事务行为 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 对cxf进行管理 <import resource="classpath:META-INF/cxf/cxf.xml" /> <import 
		resource="classpath:META-INF/cxf/cxf-extension-soap.xml" /> <import resource="classpath:META-INF/cxf/cxf-servlet.xml" 
		/> -->


	<util:properties id="APP_PROPERTIES" location="classpath:application.properties"
		local-override="true" />


    <aop:aspectj-autoproxy proxy-target-class="true"/>
		
	<!-- start fdfsPoolConfig -->
	<bean id="poolConfig" class="com.szyciov.carservice.util.fdfs.pool.FastdfsPoolConfig" />
	<bean id="fastdfsClientFactory" class="com.szyciov.carservice.util.fdfs.pool.FastdfsClientFactory">
		<property name="configFilePath" value="classpath:fdfs_client.conf"></property>
	</bean>
	<bean id="fastdfsPool" class="com.szyciov.carservice.util.fdfs.pool.FastdfsPool">
		<constructor-arg ref="poolConfig" />
		<constructor-arg ref="fastdfsClientFactory" />
	</bean>
	<bean name="fastDFSFileStoreComponent" class="com.szyciov.carservice.util.fdfs.FastDFSFileStoreComponent" />
	<!-- end fdfsPoolConfig -->
	
	
	<!-- 机构可用额度提醒扫描 -->
	<bean id="organBalanceNewsJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
		<property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrganBalanceNewsJob"/>
		<property name="cronExpression" value="0 0 8 * * ?"/>
	</bean>
	
	<!-- 订单扫描调度任务 -->
	<bean id="OrderTravelReminderScanJobTrigger" class="com.szyciov.carservice.util.scheduler.SimpleTriggerBean">
		<property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrderTravelReminderScanJob"/>
		<property name="repeatInterval" value="15000" />
	</bean>
	
	<!-- 订单超时取消调度任务 -->
	<bean id="OrderOverTimeCancelJobTrigger" class="com.szyciov.carservice.util.scheduler.SimpleTriggerBean">
		<property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrderOverTimeCancelJob"/>
		<property name="repeatInterval" value="3000" />
	</bean>
	
	<!-- 机构账单调度任务 -->
	<bean id="OrderBillJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
		<property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrderBillJob"/>
		<property name="cronExpression" value="0 0 1 * * ?" />
	</bean>
	
	<!-- 过期个性化计费规则扫描 -->
	<bean id="accountRulesOverTimeJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
		<property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.AccountRulesOverTimeJob"/>
		<property name="cronExpression" value="0 */1 * * * ?" />
	</bean>
	
	<!-- 订单统计任务调度 -->
	<bean id="orderStatisticsJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
		<property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrderStatisticsJob"/>
		<property name="cronExpression" value="0 0/30 * * * ?" />
	</bean>
	<!-- 司机心跳调度任务 -->
	<bean id="driverHeartbeattimeJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
	    <property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.DriverHeartbeattimeJob"/>
		<property name="cronExpression" value="0 0/2 * * * ?" />
	</bean>
	<!-- 运营端用户启用扫描 -->
	<bean id="peUserStartJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
		<property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.PeUserStartJob"/>
		<property name="cronExpression" value="0 0/1 * * * ?" />
	</bean>
    <!-- 订单GPS数据迁移 -->
    <bean id="ordergpsdataMigrationJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
        <property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrdergpsdataMigrationJob"/>
        <property name="cronExpression" value="0 0 0 * * ?"/>
    </bean>
    <!-- 订单返还金额活动是否终止调度任务 -->
	<bean id="giveIntegrationJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
	    <property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.GiveIntegrationJob"/>
		<property name="cronExpression" value="0 0 10 * * ?" />
	</bean>

    <!-- 订单里程计算方式结果短信下发 -->
    <bean id="orderMileageCalctypeJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
        <property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrderMileageCalctypeJob"/>
        <property name="cronExpression" value="0 0 10,15,19 * * ?"/>
    </bean>
    
    <!-- 抵扣券活动状态更新任务 -->
	<bean id="couponActivityStatusJonTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
        <property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.CouponActivityStatusJob"/>
        <!-- <property name="cronExpression" value="1 0 0 * * ?"/> -->
        <!-- 为便于测试，调度时间改为每隔5分钟执行，测试完成后，改回每天0点执行 -->
        <property name="cronExpression" value="1 0 0 * * ?"/>
    </bean>
    
    <!-- 强派订单行程提醒监控 -->
    <bean id="orderForceSendRemindJobTrigger" class="com.szyciov.carservice.util.scheduler.CronTriggerBean">
        <property name="jobClass" value="com.szyciov.carservice.util.scheduler.job.OrderForceSendRemindJob"/>
        <property name="cronExpression" value="0/3 * * * * ?"/>
    </bean>
    	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="MyDataSource" />
		<property name="configLocation" value="classpath:quartz.properties"/>
		<property name="schedulerContextAsMap">
			<map>
				<description>schedulerContextAsMap</description>
				<entry key="OrderApiService" value-ref="OrderApiService"/>
				<entry key="orderBillService" value-ref="orderBillService"/>
				<entry key="jobService" value-ref="jobService"/>
				<entry key="orderStatisticsService" value-ref="orderStatisticsService"/>
				<entry key="driverHeartbeattimeService" value-ref="driverHeartbeattimeService"/>
                <entry key="mileageApiService" value-ref="MileageApiService"/>
                <entry key="giveIntegrationService" value-ref="giveIntegrationService"/>
                <entry key="CouponActivityStatusService" value-ref="couponActivityStatusService"/>
				<entry key="rabbitService" value-ref="RabbitService"/>
			</map>
		</property>
	</bean>
	
	<bean class="com.szyciov.carservice.util.scheduler.RefreshQuartz" init-method="run">
		<property name="triggers">
			<map>
			    <entry key="organBalanceNewsJobTrigger" value-ref="organBalanceNewsJobTrigger"/>
				<entry key="OrderScanJobTrigger" value-ref="OrderTravelReminderScanJobTrigger"/>
				<entry key="OrderOverTimeCancelJobTrigger" value-ref="OrderOverTimeCancelJobTrigger"/>
				<entry key="OrderBillJobTrigger" value-ref="OrderBillJobTrigger"/>
				<entry key="accountRulesOverTimeJobTrigger" value-ref="accountRulesOverTimeJobTrigger"/>
				<entry key="orderStatisticsJobTrigger" value-ref="orderStatisticsJobTrigger"/>
				<entry key="peUserStartJobTrigger" value-ref="peUserStartJobTrigger"/>
				<entry key="driverHeartbeattimeJobTrigger" value-ref="driverHeartbeattimeJobTrigger"></entry>
                <entry key="ordergpsdataMigrationJobTrigger" value-ref="ordergpsdataMigrationJobTrigger"/>
                <entry key="giveIntegrationJobTrigger" value-ref="giveIntegrationJobTrigger"/>
               	<entry key="orderMileageCalctypeJobTrigger" value-ref="orderMileageCalctypeJobTrigger"/>
                <entry key="couponActivityStatusJonTrigger" value-ref="couponActivityStatusJonTrigger"/>
                <entry key="orderForceSendRemindJobTrigger" value-ref="orderForceSendRemindJobTrigger"/>
			</map>
		</property>
	</bean>
	
	<!-- 线程池 -->
	<bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数，默认为1 -->
        <property name="corePoolSize" value="20" />
        <!-- 最大线程数，默认为Integer.MAX_VALUE -->
        <property name="maxPoolSize" value="100" />
        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
            <property name="queueCapacity" value="1000" /> -->
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="300" />
        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>

    <import resource="classpath:rabbitMQ-spring.xml"/>
    
</beans>